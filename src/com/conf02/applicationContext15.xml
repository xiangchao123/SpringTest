<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!--实验15：分别通过注解创建Dao、Service、Controller（控制器：控制网站跳转逻辑Servlet）
    通过给bean上添加某些注解，可以快速将bean加入到ioc容器中
        某个类上添加任何一个注解都能快速的将这个组件加入到ioc容器的管理中
        Spring有四个注解：
        @Controller：控制器：我们推荐给控制器层（servlet包下的这些）的组件加这个注解
        @Service：业务逻辑：我们推荐业务逻辑层的组件添加这个组件：BookService
        @Repository：给数据库层（持久化层，dao层）的组件添加这个注解
        @Component：给不属于以上几层的组件添加这个注解；

        注解可以随便加，Spring底层不会去验证你的这个组件，是否如你注解所说就是一个dao或service层的组件
        我们推荐各自层加各自注解：给我们程序员看：

        使用注解将组件快速的加入到容器中需要几步：
        1、给要添加的组件上标四个注解的任何一个
        2、告诉Spring；自动扫描加了注解的组件：依赖context名称空间
        3、一定要导入aop包，支持注解模式的
        -->

    <!--context:component-scan:自动组件扫描
    base-package:指定扫描的基础包，把基础包及他下面所有的包的所有加了注解的类，自动的扫描进ioc容器中-->
    <!--<context:component-scan base-package="com.auto">-->
        <!--type:指定按照注解进行排除。标注了指定注解的组件不要
        type="assignable":指定排除某个具体的类，按照类排除，类的全类名
        type="aspectj"：后来aspectj表达式
        type="custom"自定义一个TypeFilter；自己写代码决定哪些使用
        type="regex"：还可以写正则表达式
        expression：注解的全类名-->
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>-->
    <!--</context:component-scan>-->
    <!--注解和bean配置相结合-->

    <!--实验16：使用context:include-filter指定扫描包时要包含的类，只扫描进入哪些组件，默认都是全部扫描进来
    一定要禁用掉默认的过滤规则才行 use-default-filters="false"-->
    <!--<context:component-scan base-package="com.auto" use-default-filters="false">-->
        <!--&lt;!&ndash;指定只扫描哪些组件&ndash;&gt;-->
        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:include-filter>-->
    <!--</context:component-scan>-->
    <!---->
        <!--实验17：使用context:exclude-filter指定扫描包时不包含的类，扫描的时候可以排除一些不要的组件-->


    <!--DI（依赖注入）-->
    <!--实验18：使用@Autowired注解实现根据类型实现自动装配：
    1、组件的id，默认就是组件的类名首字母小写:@Repository("bookdaohaha")改名字
            @Autowired
            private BookService bookService;
        原理：
            1、先按照类型去容器中找到对应的组件 ioc.getBean(BookService.class);
                1）、找到一个；找到就赋值
                2）没找到；抛异常
                3）找到多个？装配上？
                    1）、按照变量名作为id继续匹配；BookService(bookService)、BookServiceExt(bookServiceExt)

                        1)、匹配上：装配   @Autowired
                                             private BookService bookServiceExt;
                        2）、没有匹配？报错
                               原因：因为我们按照变量名作为id继续匹配的；   @Qualifier("bookService")
                                                                            @Autowired
                                                                            private BookService bookServiceExt2;
                                使用@Qualifier("bookService")指定一个新id
                                    1）、找到：装配
                                    2）、找不到：报错
                             发现Autowired标注的自动装配的属性默认是一定装配上的
                                找不到,@Autowired(required = false),表示赋值为null
                        -->
    <context:component-scan base-package="com.auto"></context:component-scan>

    <!--@Autowirede、@Resource、@Inject：都是自动装配的意思；
        @Autowirede：最强大：Spring自己的注解
        @Resource：j2ee:java的标准
        @Inject：EJB

        @Resource:扩展性更强；因为是java的标准。如果切换成另外一个容器框架。 @Resource还是可以使用的，@Autowirede就不行
        -->

    <!--泛型依赖注入，注入一个组件的时候，他的泛型也是参考标准
        Spring中可以使用带泛型的父类类型来确定这个子类的类型
    -->

    <!--            ioc是一个容器，帮我们管理所有的组件
                    1、依赖注入@Autowired：自动赋值
                    2、某个组件要使用Spring提供的更多（IOC、AOP）必须加入到容器中：
                    体会：
                    1、容器启动，创建所有单实例的bean
                    2、autowired自动装配的时候，是从容器中找这些符合要求的bean
                    3、ioc.getBean("bookServlet")：也是从容器中找这个bean
                    4、容器中包括了所有的bean
                    5、调试Spring的远吗，容器到底是什么？其实就是一个map
                    6、这个map中保存所有创建好的bean，并提供外界获取功能。。。
                    7、探索，单实例的bean都保存到那个map中了。【源码-扩展】
                    8、源码调试的思路：
                        从helloworld开始的；打断点调试，怎么知道方法是干什么的？
                        1、翻译这个方法是干什么的？
                        2、放行这个方法，看控制台，看debug的每一个变量的变化
                        3、看方法注释；
                     Spring启示：规范注释、规范类名和方法名

                    -->
</beans>